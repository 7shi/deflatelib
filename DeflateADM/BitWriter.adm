// public domain

class BitWriter
{
    var sout : FileStream;
    var buf = new byte[4096];
    int bufp;
    byte cur;
    int bit;

    static function Create(sout : FileStream)
    {
        var ret = new BitWriter;
        ret.sout = sout;
        return ret;
    }

    function WriteByte(b : byte)
    {
        buf[bufp]=b;
        if (bufp<4095)
            bufp++;
        else
        {
            sout.Write(buf);
            bufp = 0;
        }
    }

    function Close()
    {
        if (bit > 0)
        {
            WriteByte(cur);
            cur = 0;
            bit = 0;
        }
        if (bufp > 0)
        {
            sout.WriteWithLength(buf, bufp);
            bufp = 0;
        }
        //sout.Flush();
    }

    function WriteBit(b : bool)
    {
        if (b)
            cur |= (byte)(1 << bit);
        if (bit < 7)
            bit++;
        else
        {
            WriteByte(cur);
            cur = 0;
            bit = 0;
        }
    }

    function WriteBits(len : int, b : int)
    {
        if (len > 0)
        {
            int s = (b * 8 + bit) * 3;
            var v = (byte)(cur | Deflate.sl[s]);
            int pos = bit + len;
            if (pos < 8)
            {
                cur = v;
                bit = pos;
            }
            else
            {
                WriteByte(v);
                if (pos < 16)
                {
                    cur = Deflate.sl[s + 1];
                    bit = pos - 8;
                }
                else
                {
                    WriteByte(Deflate.sl[s + 1]);
                    cur = Deflate.sl[s + 2];
                    bit = pos - 16;
                }
            }
        }
    }

    function WriteFixedHuffman(b : int)
    {
        if (b < 144)
            WriteBits(8, Deflate.rev[b + 48]);
        else if (b < 256)
        {
            WriteBit(true);
            WriteBits(8, Deflate.rev[b]);
        }
        else if (b < 280)
            WriteBits(7, Deflate.rev[(b - 256) << 1]);
        else if (b < 288)
            WriteBits(8, Deflate.rev[b - 88]);
    }

    function WriteLen(length : int)
    {
        int ll = Deflate.litindex[length - 3];
        WriteFixedHuffman(ll);
        WriteBits(Deflate.litexlens[ll], length - Deflate.litlens[ll]);
    }

    function WriteDist(d : int)
    {
        int dl = Deflate.distindex[d - 1];
        WriteBits(5, Deflate.rev[dl << 3]);
        WriteBits(Deflate.distexlens[dl], d - Deflate.distlens[dl]);
    }
}
