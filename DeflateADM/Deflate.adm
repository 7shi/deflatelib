// public domain

class Deflate
{
    const int maxlen = 258;
    const int maxdist = 32768;
    static var litexlens  = new int [286];
    static var litlens    = new int [286];
    static var litindex   = new int [maxlen-2];
    static var distexlens = new int [30];
    static var distlens   = new int [30];
    static var distindex  = new int [maxdist];
    static var sl         = new byte[8192 * 8 * 3];
    static var rev        = new byte[256];

    static function Init
    {
        for (int i=265; i<=284; i++)
            litexlens[i]=(i - 261) >> 2;

        int v = 3;
        for (int i = 257; i <= 284; i++)
        {
            litlens[i] = v;
            int p2 = 1;
            for (int j = 1; j <= litexlens[i]; j++)
                p2 <<= 1;
            for (int j = 1; j <= p2; j++)
                litindex[(v++) - 3] = i;
        }
        litlens[285] = maxlen;
        litindex[maxlen - 3] = 285;

        for (int i = 4; i < 30; i++)
            distexlens[i] = (i - 2) >> 1;

        v = 1;
        for (int i = 0; i < 30; i++)
        {
            distlens[i] = v;
            int p2 = 1;
            for (int j = 1; j <= distexlens[i]; j++)
                p2 <<= 1;
            for (int j = 1; j <= p2; j++)
                distindex[(v++) - 1] = i;
        }

        int index = 0;
        for (int i = 0; i < 8192; i++)
        {
            int p2 = 1;
            for (int j = 0; j < 8; j++)
            {
                v = i * p2;
                sl[index++] = (byte)(v & 255);
                sl[index++] = (byte)((v >> 8) & 255);
                sl[index++] = (byte)(v >> 16);
                p2 += p2;
            }
        }

        for (int i = 0; i < 256; i++)
        {
            int p2 = 1;
            int p2r = 128;
            int b = 0;
            for (int j = 0; j < 8; j++)
            {
                if ((i & p2) != 0)
                    b += p2r;
                p2 <<= 1;
                p2r >>= 1;
            }
            rev[i] = (byte)b;
        }
    }

    static function Compress(sin : FileStream, sout : FileStream)
    {
        if (rev[255] == 0) Init();
        var w = new DeflateWriter();
        w.Compress(sin, sout);
    }
}
